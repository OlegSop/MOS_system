# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MainProgDesighn.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from datetime import datetime


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(933, 721)
        MainWindow.setMinimumSize(QtCore.QSize(933, 721))
        MainWindow.setMaximumSize(QtCore.QSize(933, 721))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        MainWindow.setPalette(palette)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.Celsium = QtWidgets.QLabel(self.centralwidget)
        self.Celsium.setGeometry(QtCore.QRect(140, 270, 31, 31))
        font = QtGui.QFont()
        font.setFamily("Lato")
        font.setPointSize(20)
        self.Celsium.setFont(font)
        self.Celsium.setAlignment(QtCore.Qt.AlignCenter)
        self.Celsium.setObjectName("Celsium")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(-10, 310, 951, 16))
        self.line.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line.setLineWidth(3)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setObjectName("line")
        self.temperature_value = QtWidgets.QLabel(self.centralwidget)
        self.temperature_value.setGeometry(QtCore.QRect(50, 270, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Lato")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.temperature_value.setFont(font)
        self.temperature_value.setMouseTracking(False)
        self.temperature_value.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.temperature_value.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.temperature_value.setObjectName("temperature_value")
        self.temperature_graph = QtWidgets.QLabel(self.centralwidget)
        self.temperature_graph.setGeometry(QtCore.QRect(50, 110, 141, 141))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.temperature_graph.sizePolicy().hasHeightForWidth())
        self.temperature_graph.setSizePolicy(sizePolicy)
        self.temperature_graph.setText("")
        self.temperature_graph.setPixmap(QtGui.QPixmap("images/no temperature.png"))
        self.temperature_graph.setScaledContents(True)
        self.temperature_graph.setObjectName("temperature_graph")
        self.TemperatureData = QtWidgets.QLabel(self.centralwidget)
        self.TemperatureData.setGeometry(QtCore.QRect(30, 55, 184, 33))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setPointSize(20)
        self.TemperatureData.setFont(font)
        self.TemperatureData.setAlignment(QtCore.Qt.AlignCenter)
        self.TemperatureData.setObjectName("TemperatureData")
        self.EngineData = QtWidgets.QLabel(self.centralwidget)
        self.EngineData.setGeometry(QtCore.QRect(310, 0, 271, 33))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setPointSize(20)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.EngineData.setFont(font)
        self.EngineData.setAlignment(QtCore.Qt.AlignCenter)
        self.EngineData.setObjectName("EngineData")
        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setGeometry(QtCore.QRect(-10, 30, 951, 16))
        self.line_2.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_2.setLineWidth(3)
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setObjectName("line_2")
        self.line_3 = QtWidgets.QFrame(self.centralwidget)
        self.line_3.setGeometry(QtCore.QRect(231, 40, 20, 280))
        self.line_3.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_3.setLineWidth(2)
        self.line_3.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_3.setObjectName("line_3")
        self.CurrentData = QtWidgets.QLabel(self.centralwidget)
        self.CurrentData.setGeometry(QtCore.QRect(270, 55, 181, 31))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setPointSize(20)
        self.CurrentData.setFont(font)
        self.CurrentData.setAlignment(QtCore.Qt.AlignCenter)
        self.CurrentData.setObjectName("CurrentData")
        self.currentgraph = QtWidgets.QLabel(self.centralwidget)
        self.currentgraph.setGeometry(QtCore.QRect(290, 110, 141, 141))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.currentgraph.sizePolicy().hasHeightForWidth())
        self.currentgraph.setSizePolicy(sizePolicy)
        self.currentgraph.setText("")
        self.currentgraph.setPixmap(QtGui.QPixmap("images/no current.png"))
        self.currentgraph.setScaledContents(True)
        self.currentgraph.setObjectName("currentgraph")
        self.speed_graph = QtWidgets.QLabel(self.centralwidget)
        self.speed_graph.setGeometry(QtCore.QRect(520, 110, 141, 141))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.speed_graph.sizePolicy().hasHeightForWidth())
        self.speed_graph.setSizePolicy(sizePolicy)
        self.speed_graph.setText("")
        self.speed_graph.setPixmap(QtGui.QPixmap("images/no speed.png"))
        self.speed_graph.setScaledContents(True)
        self.speed_graph.setObjectName("speed_graph")
        self.line_4 = QtWidgets.QFrame(self.centralwidget)
        self.line_4.setGeometry(QtCore.QRect(693, 40, 20, 280))
        self.line_4.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_4.setLineWidth(2)
        self.line_4.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_4.setObjectName("line_4")
        self.SpeedData = QtWidgets.QLabel(self.centralwidget)
        self.SpeedData.setGeometry(QtCore.QRect(500, 55, 184, 33))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setPointSize(20)
        self.SpeedData.setFont(font)
        self.SpeedData.setAlignment(QtCore.Qt.AlignCenter)
        self.SpeedData.setObjectName("SpeedData")
        self.line_5 = QtWidgets.QFrame(self.centralwidget)
        self.line_5.setGeometry(QtCore.QRect(462, 40, 20, 280))
        self.line_5.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_5.setLineWidth(2)
        self.line_5.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_5.setObjectName("line_5")
        self.torqueData = QtWidgets.QLabel(self.centralwidget)
        self.torqueData.setGeometry(QtCore.QRect(730, 40, 181, 71))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setPointSize(20)
        self.torqueData.setFont(font)
        self.torqueData.setAlignment(QtCore.Qt.AlignCenter)
        self.torqueData.setObjectName("torqueData")
        self.ltorque_graph = QtWidgets.QLabel(self.centralwidget)
        self.ltorque_graph.setGeometry(QtCore.QRect(750, 110, 141, 141))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ltorque_graph.sizePolicy().hasHeightForWidth())
        self.ltorque_graph.setSizePolicy(sizePolicy)
        self.ltorque_graph.setText("")
        self.ltorque_graph.setPixmap(QtGui.QPixmap("images/no torque.png"))
        self.ltorque_graph.setScaledContents(True)
        self.ltorque_graph.setObjectName("ltorque_graph")
        self.ampers = QtWidgets.QLabel(self.centralwidget)
        self.ampers.setGeometry(QtCore.QRect(380, 270, 31, 31))
        font = QtGui.QFont()
        font.setFamily("Lato")
        font.setPointSize(20)
        self.ampers.setFont(font)
        self.ampers.setAlignment(QtCore.Qt.AlignCenter)
        self.ampers.setObjectName("ampers")
        self.current_value = QtWidgets.QLabel(self.centralwidget)
        self.current_value.setGeometry(QtCore.QRect(290, 270, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Lato")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.current_value.setFont(font)
        self.current_value.setMouseTracking(False)
        self.current_value.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.current_value.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.current_value.setObjectName("current_value")
        self.rpm = QtWidgets.QLabel(self.centralwidget)
        self.rpm.setGeometry(QtCore.QRect(600, 270, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Lato")
        font.setPointSize(20)
        self.rpm.setFont(font)
        self.rpm.setAlignment(QtCore.Qt.AlignCenter)
        self.rpm.setObjectName("rpm")
        self.speed_value = QtWidgets.QLabel(self.centralwidget)
        self.speed_value.setGeometry(QtCore.QRect(510, 270, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Lato")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.speed_value.setFont(font)
        self.speed_value.setMouseTracking(False)
        self.speed_value.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.speed_value.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.speed_value.setObjectName("speed_value")
        self.Nm = QtWidgets.QLabel(self.centralwidget)
        self.Nm.setGeometry(QtCore.QRect(830, 270, 51, 31))
        font = QtGui.QFont()
        font.setFamily("Lato")
        font.setPointSize(20)
        self.Nm.setFont(font)
        self.Nm.setAlignment(QtCore.Qt.AlignCenter)
        self.Nm.setObjectName("Nm")
        self.torque_value = QtWidgets.QLabel(self.centralwidget)
        self.torque_value.setGeometry(QtCore.QRect(740, 270, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Lato")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.torque_value.setFont(font)
        self.torque_value.setMouseTracking(False)
        self.torque_value.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.torque_value.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.torque_value.setObjectName("torque_value")
        self.line_6 = QtWidgets.QFrame(self.centralwidget)
        self.line_6.setGeometry(QtCore.QRect(-10, 600, 951, 16))
        self.line_6.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_6.setLineWidth(3)
        self.line_6.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_6.setObjectName("line_6")
        self.Recommendation = QtWidgets.QLabel(self.centralwidget)
        self.Recommendation.setGeometry(QtCore.QRect(310, 320, 271, 33))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setPointSize(20)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.Recommendation.setFont(font)
        self.Recommendation.setAlignment(QtCore.Qt.AlignCenter)
        self.Recommendation.setObjectName("Recommendation")
        self.Data = QtWidgets.QLabel(self.centralwidget)
        self.Data.setGeometry(QtCore.QRect(680, 630, 81, 41))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setPointSize(20)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.Data.setFont(font)
        self.Data.setAlignment(QtCore.Qt.AlignCenter)
        self.Data.setObjectName("Data")
        self.Time = QtWidgets.QLabel(self.centralwidget)
        self.Time.setGeometry(QtCore.QRect(760, 670, 81, 41))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setPointSize(20)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.Time.setFont(font)
        self.Time.setAlignment(QtCore.Qt.AlignCenter)
        self.Time.setObjectName("Time")
        self.Data_Value = QtWidgets.QLabel(self.centralwidget)
        self.Data_Value.setGeometry(QtCore.QRect(760, 630, 151, 41))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setPointSize(20)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.Data_Value.setFont(font)
        self.Data_Value.setAlignment(QtCore.Qt.AlignCenter)
        self.Data_Value.setObjectName("Data_Value")
        self.Time_Value = QtWidgets.QLabel(self.centralwidget)
        self.Time_Value.setGeometry(QtCore.QRect(830, 670, 81, 41))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setPointSize(20)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.Time_Value.setFont(font)
        self.Time_Value.setAlignment(QtCore.Qt.AlignCenter)
        self.Time_Value.setObjectName("Time_Value")
        self.line_7 = QtWidgets.QFrame(self.centralwidget)
        self.line_7.setGeometry(QtCore.QRect(630, 610, 20, 120))
        self.line_7.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_7.setLineWidth(2)
        self.line_7.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_7.setObjectName("line_7")
        self.Efficency = QtWidgets.QLabel(self.centralwidget)
        self.Efficency.setGeometry(QtCore.QRect(50, 640, 311, 51))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setPointSize(20)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.Efficency.setFont(font)
        self.Efficency.setAlignment(QtCore.Qt.AlignCenter)
        self.Efficency.setObjectName("Efficency")
        self.Efficency_value = QtWidgets.QLabel(self.centralwidget)
        self.Efficency_value.setGeometry(QtCore.QRect(390, 640, 211, 51))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setPointSize(20)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.Efficency_value.setFont(font)
        self.Efficency_value.setAlignment(QtCore.Qt.AlignCenter)
        self.Efficency_value.setObjectName("Efficency_value")
        self.line_8 = QtWidgets.QFrame(self.centralwidget)
        self.line_8.setGeometry(QtCore.QRect(-30, 720, 971, 16))
        self.line_8.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_8.setLineWidth(3)
        self.line_8.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_8.setObjectName("line_8")
        self.line_9 = QtWidgets.QFrame(self.centralwidget)
        self.line_9.setGeometry(QtCore.QRect(930, -1, 20, 731))
        self.line_9.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_9.setLineWidth(2)
        self.line_9.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_9.setObjectName("line_9")
        self.line_10 = QtWidgets.QFrame(self.centralwidget)
        self.line_10.setGeometry(QtCore.QRect(-20, 350, 961, 16))
        self.line_10.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_10.setLineWidth(3)
        self.line_10.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_10.setObjectName("line_10")
        self.topbackground = QtWidgets.QGraphicsView(self.centralwidget)
        self.topbackground.setGeometry(QtCore.QRect(0, 0, 941, 41))
        self.topbackground.setAutoFillBackground(True)
        self.topbackground.setStyleSheet("background-color: rgb(0, 255, 255)")
        self.topbackground.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.topbackground.setObjectName("topbackground")
        self.middlebackground = QtWidgets.QGraphicsView(self.centralwidget)
        self.middlebackground.setGeometry(QtCore.QRect(0, 320, 941, 41))
        self.middlebackground.setStyleSheet("background-color: rgb(0, 255, 255)")
        self.middlebackground.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.middlebackground.setObjectName("middlebackground")
        self.bottombakcground = QtWidgets.QGraphicsView(self.centralwidget)
        self.bottombakcground.setGeometry(QtCore.QRect(0, 610, 941, 121))
        self.bottombakcground.setStyleSheet("background-color: rgb(0, 255, 255)")
        self.bottombakcground.setFrameShape(QtWidgets.QFrame.StyledPanel)
        brush = QtGui.QBrush(QtGui.QColor(144, 144, 144))
        brush.setStyle(QtCore.Qt.NoBrush)
        self.bottombakcground.setBackgroundBrush(brush)
        brush = QtGui.QBrush(QtGui.QColor(144, 144, 144))
        brush.setStyle(QtCore.Qt.NoBrush)
        self.bottombakcground.setForegroundBrush(brush)
        self.bottombakcground.setInteractive(True)
        self.bottombakcground.setResizeAnchor(QtWidgets.QGraphicsView.NoAnchor)
        self.bottombakcground.setObjectName("bottombakcground")
        self.Recommendation_Value = QtWidgets.QLabel(self.centralwidget)
        self.Recommendation_Value.setGeometry(QtCore.QRect(20, 380, 871, 201))
        font = QtGui.QFont()
        font.setFamily("Century Gothic")
        font.setPointSize(20)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.Recommendation_Value.setFont(font)
        self.Recommendation_Value.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignTop)
        self.Recommendation_Value.setWordWrap(True)
        self.Recommendation_Value.setObjectName("Recommendation_Value")
        self.bottombakcground.raise_()
        self.middlebackground.raise_()
        self.topbackground.raise_()
        self.line_4.raise_()
        self.line_5.raise_()
        self.line_3.raise_()
        self.Celsium.raise_()
        self.line.raise_()
        self.temperature_value.raise_()
        self.temperature_graph.raise_()
        self.TemperatureData.raise_()
        self.EngineData.raise_()
        self.line_2.raise_()
        self.CurrentData.raise_()
        self.currentgraph.raise_()
        self.speed_graph.raise_()
        self.SpeedData.raise_()
        self.torqueData.raise_()
        self.ltorque_graph.raise_()
        self.ampers.raise_()
        self.current_value.raise_()
        self.rpm.raise_()
        self.speed_value.raise_()
        self.Nm.raise_()
        self.torque_value.raise_()
        self.line_6.raise_()
        self.Recommendation.raise_()
        self.Data.raise_()
        self.Time.raise_()
        self.Data_Value.raise_()
        self.Time_Value.raise_()
        self.line_7.raise_()
        self.Efficency.raise_()
        self.Efficency_value.raise_()
        self.line_8.raise_()
        self.line_9.raise_()
        self.line_10.raise_()
        self.Recommendation_Value.raise_()
        self.graph_torque = graph_torque
        self.graph_temp = graph_temp
        self.graph_speed = graph_speed
        self.graph_current = graph_current
        self.torque_vals = torque_vals
        self.speed_vals = speed_vals
        self.current_vals = current_vals
        self.temperature_vals = temperature_vals
        self.recommend_vals = recommend_vals
        self.efficient_vals = efficient_vals
        self.counter = 0
        self.len_man = len(self.recommend_vals)

        MainWindow.setWindowIcon(QtGui.QIcon('images/logo.png'))
        MainWindow.setCentralWidget(self.centralwidget)
        print("Starting system")
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        timer = QtCore.QTimer(MainWindow)
        timer.timeout.connect(self.onTimeout)
        timer.start(10000)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Інформаційна панель"))
        self.Celsium.setText(_translate("MainWindow", "°C"))
        self.temperature_value.setText(_translate("MainWindow", "0"))
        self.TemperatureData.setText(_translate("MainWindow", "Температура"))
        self.EngineData.setText(_translate("MainWindow", "Показники двигуна"))
        self.CurrentData.setText(_translate("MainWindow", "Струм"))
        self.SpeedData.setText(_translate("MainWindow", "Швидкість"))
        self.torqueData.setText(_translate("MainWindow", "Обертовий\n"
                                                         " момент"))
        self.ampers.setText(_translate("MainWindow", "А"))
        self.current_value.setText(_translate("MainWindow", "0"))
        self.rpm.setText(_translate("MainWindow", "об/хв"))
        self.speed_value.setText(_translate("MainWindow", "0"))
        self.Nm.setText(_translate("MainWindow", "Нм"))
        self.torque_value.setText(_translate("MainWindow", "0"))
        self.Recommendation.setText(_translate("MainWindow", "Рекомендація"))
        self.Data.setText(_translate("MainWindow", "Дата: "))
        self.Time.setText(_translate("MainWindow", "Час:"))
        self.Data_Value.setText(_translate("MainWindow", "00-00-0000"))
        self.Time_Value.setText(_translate("MainWindow", "00:00"))
        self.Efficency.setText(_translate("MainWindow", "Ефективність двигуна:"))
        self.Efficency_value.setText(_translate("MainWindow", "Не визначено"))
        self.Recommendation_Value.setText(_translate("MainWindow", "Завантаження даних показників та рекомендацій. "
                                                                   "Очікуйте ..."))

    def critical_temperature_message(self):
        self.msgBox = QtWidgets.QMessageBox()
        self.msgBox.setIcon(QtWidgets.QMessageBox.Critical)
        self.msgBox.setText("Критичні показники температури")
        self.msgBox.setWindowTitle("Увага!!!")
        self.msgBox.setWindowIcon(QtGui.QIcon('images/critical_fail.png'))
        self.msgBox.setStandardButtons(QtWidgets.QMessageBox.Ok)
        print("Critical temperature indicator!")
        self.msgBox.show()

    def onTimeout(self):
        if self.counter >= self.len_man:
            self.counter = 0
        elif self.counter == 6:
            self.critical_temperature_message()

        self.today = datetime.today()
        self.format_time = self.today.strftime("%H:%M")
        self.format_date = self.today.strftime("%d-%m-%Y")

        self.ltorque_graph.setPixmap(QtGui.QPixmap(str(self.graph_torque[self.counter])))
        self.speed_graph.setPixmap(QtGui.QPixmap(str(self.graph_speed[self.counter])))
        self.temperature_graph.setPixmap(QtGui.QPixmap(str(self.graph_temp[self.counter])))
        self.currentgraph.setPixmap(QtGui.QPixmap(str(self.graph_current[self.counter])))
        self.temperature_value.setText(str(self.temperature_vals[self.counter]))
        self.current_value.setText(str(self.current_vals[self.counter]))
        self.speed_value.setText(str(self.speed_vals[self.counter]))
        self.torque_value.setText(str(self.torque_vals[self.counter]))
        self.Efficency_value.setText(str(self.efficient_vals[self.counter]))
        self.Recommendation_Value.setText(str(self.recommend_vals[self.counter]))
        self.Data_Value.setText(str(self.format_date))
        self.Time_Value.setText(str(self.format_time))
        print("Information panel was updated")
        self.counter += 1


class MainWindow(QtWidgets.QMainWindow, Ui_MainWindow):
    def __init__(self, *args, obj=None, **kwargs):
        super(MainWindow, self).__init__(*args, **kwargs)
        self.setupUi(self)

    @staticmethod
    def updateInformationPanel(indicators_data, recommendation_data):
        print("Information Panel was updated successfully")

    def closeEvent(self, event):
        # Ask for confirmation
        answer = QtWidgets.QMessageBox.question(self,
                                                "Вимкнення двигуна...",
                                                "Ви впевнені, що хочете розпочати процес вимкнення двигуна",
                                                QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No)

        event.ignore()
        if answer == QtWidgets.QMessageBox.Yes:
            print("Stopping system")
            loop = QtCore.QEventLoop()
            QtCore.QTimer.singleShot(5000, loop.quit)
            self.ltorque_graph.setPixmap(QtGui.QPixmap("images/no torque.png"))
            self.speed_graph.setPixmap(QtGui.QPixmap("images/no speed.png"))
            self.temperature_graph.setPixmap(QtGui.QPixmap("images/no temperature.png"))
            self.currentgraph.setPixmap(QtGui.QPixmap("images/no current.png"))
            self.temperature_value.setText("0")
            self.current_value.setText("0")
            self.speed_value.setText("0")
            self.torque_value.setText("0")
            self.Efficency_value.setText("Не визначено")
            self.Recommendation_Value.setText("Вимкнення системи і двигуна. Очікуйте завершення ...")
            self.Data_Value.setText("00-00-0000")
            self.Time_Value.setText("00:00")
            loop.exec_()
            event.accept()


graph_torque = ['images/low torque.png', 'images/optimal torque.png', 'images/optimal torque.png',
                'images/optimal torque.png', 'images/optimal torque.png', 'images/optimal torque.png',
                'images/optimal torque.png', 'images/low torque.png', 'images/low torque.png',
                'images/optimal torque.png']
graph_temp = ['images/normal temperature.png', 'images/normal temperature.png', 'images/normal temperature.png',
              'images/normal temperature.png', 'images/high temperature.png', 'images/high temperature.png',
              'images/critical temperature.png', 'images/high temperature.png', 'images/normal temperature.png',
              'images/normal temperature.png']
graph_speed = ['images/low speed.png', 'images/low speed.png', 'images/optimal speed.png', 'images/optimal speed.png',
               'images/high speed.png', 'images/highest speed.png', 'images/highest speed.png',
               'images/optimal speed.png', 'images/optimal speed.png', 'images/optimal speed.png']
graph_current = ['images/normal current.png', 'images/normal current.png', 'images/normal current.png',
                 'images/normal current.png', 'images/normal current.png', 'images/normal current.png',
                 'images/normal current.png', 'images/normal current.png', 'images/normal current.png',
                 'images/normal current.png']
torque_vals = [32, 88, 63, 86, 72, 64, 68, 6, 20, 84]
speed_vals = [278, 599, 1287, 2089, 4205, 5495, 5599, 3500, 2655, 2249]
current_vals = [45, 121, 91, 121, 168, 208, 210, 39, 44, 119]
temperature_vals = [26, 29, 73, 58, 85, 90, 97, 80, 53, 55]
recommend_vals = ['Завантаження даних завершено.\nПоказники температури та сили струму в нормі.\nРекомендується '
                  'підвищити обертовий момент та швидкість двигуна для кращої ефективності роботи двигуна.',
                  'Обертовий момент знаходиться в оптимальних межах.\nДля отримання оптимальної швидкості '
                  'рекомендується утримувати поточний діапазон обертового моменту, +- 5Нм.',
                  'Швидкість та обертальний момент знаходяться в оптимальному режимі.\n'
                  'Для досягнення максимальної ефективності рекомендується підвищити обертовий момент двигуна.',
                  'Максимальна ефективність роботи двигуна досягнута.\n'
                  'Рекомендується, за можливості, зберігати поточний швидкісний режим та значення обертового моменту.',
                  'Спостерігається підвищення температури двигуна.\n'
                  'Рекомендується зменшити швидкість до досягнення нормальної температури двигуна.',
                  'Спостерігається підвищення температури двигуна.\nІснує ризик перегріву.\nРекомендується зменшити '
                  'швидкість до досягнення нормальної температури двигуна.',
                  'Критичні покази температури.\nІснує ризик виходу з ладу двигуна.\nНакладено обмеження на подання '
                  'обертового моменту.',
                  'Підвищенні показники температури двигуна.\nОбмеження на подання обертового моменту знято.\n'
                  'Рекомендується зменшити швидкість до досягнення нормальної температури двигуна.',
                  'Швидкість двигуна знаходиться в оптимальних межах.\nРекомендується збільшити обертовий момент для '
                  'підвищення ефективності роботи двигуна.', 'Максимальна ефективність роботи двигуна досягнута.\n'
                  'Рекомендується, за можливості, зберігати поточний швидкісний режим та значення обертового моменту.' ]
efficient_vals = ['Дуже низька', 'Низька', 'Висока', 'Максимальна',
                  'Висока', 'Середня', 'Низька', 'Низька', 'Середня', 'Максимальна']

if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    # MainWindow = QtWidgets.QMainWindow()
    # ui = Ui_MainWindow()
    # ui.setupUi(MainWindow)

    win = MainWindow()
    win.show()
    sys.exit(app.exec_())
